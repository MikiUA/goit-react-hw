{"version":3,"file":"static/js/682.a233087e.chunk.js","mappings":"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","sources":["hw-02-phonebook/styles/AddContactForm.styled.js","hw-02-phonebook/AddContactForm.js","hw-02-phonebook/styles/ContactDisplay.styled.js","hw-02-phonebook/DisplayContacts.js","hw-02-phonebook/App.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const FormLabel=styled.label`\n    display:block;\n    font-style:italic;\n`\nexport const FormInput = styled.input`\n    font-size:55%;\n    margin-left:5%;\n`\nexport const FormButton=styled.button`\n    display:block;\n    margin-top:1em;\n    margin-left:5%;\n    font-size:40%;\n`","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { FormButton, FormInput, FormLabel } from './styles/AddContactForm.styled';\n\nfunction AddContactForm({submitFunction}) {\n  const [name,setName]=useState('');\n  const [number,setNumber]=useState('');\n  //program does not need controlled inputs here, but task does\n \n  return (\n    <form onSubmit={(e)=>{e.preventDefault(); submitFunction(name,number)}}>\n      <div>\n      <FormLabel htmlFor='acf-name'>Ім'я контакту</FormLabel>\n      <FormInput\n        id='acf-name'\n        value={name}\n        onChange={(event)=>(setName(event.target.value))}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      </div>\n      <div>\n      <FormLabel htmlFor='acf-num'>Телефонний номер</FormLabel>\n      <FormInput\n        id='acf-num'\n        value={number}\n        onChange={(event)=>(setNumber(event.target.value))}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      </div>\n      <FormButton type='submit'>Додати контакт</FormButton>\n    </form>\n  )\n}\n\nAddContactForm.propTypes = {\n  submitFunction:PropTypes.func\n}\n\nexport default AddContactForm\n","import styled from \"styled-components\";\n\nexport const ContactList = styled.ul`\nwidth:fit-content;\npadding-right:1em;\nheight:10em;\nborder-left:1px solid black;\noverflow-y:auto;\n`\nexport const ContactItem = styled.li`\nmargin-top:2%;\nbordewr-left:1px solid black;\npadding-left:0.2em\n`\n\nexport const DeleteBtn = styled.div`\n    display:block;\n    text-align:center;\n    background-color:#dcaaaa;\n    font-size:35%;\n    border-radius:10em;\n    \n    &:hover{\n        background-color:#ee4444;\n        border: 1px solid #aa0000\n    }\n`","import React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { ContactItem, ContactList, DeleteBtn } from './styles/ContactDisplay.styled';\nimport { FormButton, FormInput } from './styles/AddContactForm.styled';\n\nfunction DisplayContacts({contacts, removeContact, removeAllContacts,setTemplateContacts}) {\n  const [filter,setFilter]=useState('');\n\n  function checkItem(item){\n    if (item.name.toUpperCase().includes(filter)) return true;\n    if (item.number.toString().includes(filter)) return true;\n    return false;\n  }\n\n  return (\n    <div>\n      <FormInput\n        type='text' \n        value={filter} \n        placeholder='find a contact'\n        onChange={(e)=>setFilter(e.target.value.toUpperCase())}\n      />\n      <div style={{display:'flex'}}>\n        <FormButton onClick={()=>setTemplateContacts()}>Set template contacts</FormButton>\n        <FormButton onClick={()=>removeAllContacts()}>Remove all contacts</FormButton>\n      </div>\n      <ContactList>\n        {contacts.filter(checkItem).map(({id,name,number})=>(\n          <ContactItem key={id}>\n            {name}:  {number}\n            <DeleteBtn onClick={()=>removeContact(id)}>Delete</DeleteBtn>\n          </ContactItem>\n        ))}\n      </ContactList>\n    </div>\n  )\n}\n\nDisplayContacts.propTypes = {\n  contacts:PropTypes.arrayOf(\n    PropTypes.exact({\n      id:PropTypes.any,\n      name:PropTypes.string,\n      number:PropTypes.string\n    })\n  ).isRequired,\n  removeContact:PropTypes.func.isRequired,\n  removeAllContacts:PropTypes.func.isRequired,\n  setTemplateContacts:PropTypes.func.isRequired\n}\n\nexport default DisplayContacts\n","import Section from 'generalComponents/Section';\nimport React, { useEffect, useState } from 'react'\nimport AddContactForm from './AddContactForm';\nimport DisplayContacts from './DisplayContacts';\n\nexport default function App() {\n  const [contacts,setContacts]=useState([]);\n  const componentDidMount=React.useRef(false)\n\n  useEffect(()=>{\n    //on component mount check local storage \n    //setState (contacts) to those stored in users storage\n    //then set componentDidMount to true\n    \n    let storedContacts = JSON.parse(localStorage.getItem('contactList'));\n    if (storedContacts){\n      setContacts(storedContacts);\n    }\n    componentDidMount.current=true;\n    \n  },[]);\n\n  useEffect(()=>{\n    //on component update (contacts state is actually the only value that can update it) we store our state in local storage\n    //should not affect user expirience or rerender, could even be asyncronous\n\n    if(componentDidMount.current) {\n      localStorage.setItem('contactList',JSON.stringify(contacts));\n    }\n  },[contacts])\n\n  return (\n    <Section type='task' title='Книга контактів'>\n      <Section label='Add contact'>\n        <AddContactForm submitFunction={addContact}/>\n      </Section>\n      <Section label='Contact list'>\n        <DisplayContacts contacts={contacts} removeContact={removeContact} removeAllContacts={removeAllContacts} setTemplateContacts={setTemplateContacts}/></Section>\n      </Section>\n  )\n\n  //#region contacts state functions\n  function checkContactExists(newContact){\n    for (let i=0;i<contacts.length;i++){\n      if (contacts[i].name.toLowerCase()===newContact.name.toLowerCase())  return true;\n      if (contacts[i].number===newContact.number) return true;\n    }\n    return false;\n  }\n\n  function addContact(name,number){\n    if (checkContactExists({name,number})) alert('You already have this contact')\n    else setContacts((previous)=>(\n      [...previous, {\n        id:Date.now(),\n        name,\n        number\n      }]))\n  }\n\n  function removeContact(contactID){\n    setContacts(prevState=>(prevState.filter(item=>item.id!==contactID)))\n  }\n\n  function removeAllContacts(){setContacts([]);}\n  function setTemplateContacts(){setContacts(initialContacts);}\n  //#endregion\n  \n}\n\nconst initialContacts=[\n  {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\n  {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\n  {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\n  {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'}\n]\n"],"names":["FormLabel","styled","FormInput","FormButton","submitFunction","useState","name","setName","number","setNumber","onSubmit","e","preventDefault","htmlFor","id","value","onChange","event","target","type","pattern","title","required","ContactList","ContactItem","DeleteBtn","contacts","removeContact","removeAllContacts","setTemplateContacts","filter","setFilter","placeholder","toUpperCase","style","display","onClick","item","includes","toString","map","App","setContacts","componentDidMount","React","useEffect","storedContacts","JSON","parse","localStorage","getItem","current","setItem","stringify","Section","label","newContact","i","length","toLowerCase","checkContactExists","previous","Date","now","alert","contactID","prevState","initialContacts"],"sourceRoot":""}