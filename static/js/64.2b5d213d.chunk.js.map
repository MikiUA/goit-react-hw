{"version":3,"file":"static/js/64.2b5d213d.chunk.js","mappings":"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","sources":["hw-03-phonebook/styles/AddContactForm.styled.js","hw-03-phonebook/AddContactForm.js","hw-03-phonebook/styles/ContactDisplay.styled.js","hw-03-phonebook/DisplayContacts.js","hw-03-phonebook/App.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const FormLabel=styled.label`\n    display:block;\n    font-style:italic;\n`\nexport const FormInput = styled.input`\n    font-size:55%;\n    margin-left:5%;\n`\nexport const FormButton=styled.button`\n    display:block;\n    margin-top:1em;\n    margin-left:5%;\n    font-size:40%;\n`","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { FormButton, FormInput, FormLabel } from './styles/AddContactForm.styled';\n\nexport default class AddContactForm extends Component {\n  static propTypes = {submitFunction:PropTypes.func.isRequired}\n\n  state={\n    name:'',\n    number:''\n  }\n  submitHandler=(e)=>{\n    e.preventDefault(); \n    const { name, number } = e.target.elements;\n    this.props.submitFunction(name.value,number.value)\n  }\n  render() {\n    return (\n      <form onSubmit={this.submitHandler}>\n        <div>\n          <FormLabel htmlFor='name'>Ім'я контакту</FormLabel>\n          <FormInput\n            id='name'\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n          />\n        </div>\n        <div>\n          <FormLabel htmlFor='number'>Телефонний номер</FormLabel>\n          <FormInput\n            id='number'  \n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n          />\n        </div>\n        <FormButton type='submit'>Додати контакт</FormButton>\n      </form>\n    )\n  }\n}","import styled from \"styled-components\";\n\nexport const ContactList = styled.ul`\nwidth:fit-content;\npadding-right:1em;\nheight:10em;\nborder-left:1px solid black;\noverflow-y:auto;\n`\nexport const ContactItem = styled.li`\nmargin-top:2%;\nbordewr-left:1px solid black;\npadding-left:0.2em\n`\n\nexport const DeleteBtn = styled.div`\n    display:block;\n    text-align:center;\n    background-color:#dcaaaa;\n    font-size:35%;\n    border-radius:10em;\n    \n    &:hover{\n        background-color:#ee4444;\n        border: 1px solid #aa0000\n    }\n`","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { ContactItem, ContactList, DeleteBtn } from './styles/ContactDisplay.styled';\nimport { FormButton, FormInput } from './styles/AddContactForm.styled';\n\nexport default class DisplayContacts extends Component {\n  static propTypes =  {\n    contacts:PropTypes.arrayOf(\n      PropTypes.exact({\n        id:PropTypes.any,\n        name:PropTypes.string,\n        number:PropTypes.string\n      })\n    ).isRequired,\n    removeContact:PropTypes.func.isRequired,\n    removeAllContacts:PropTypes.func.isRequired,\n    setTemplateContacts:PropTypes.func.isRequired\n  }\n\n  state={\n    filter:''\n  }\n  \n  checkItem=(item)=>{\n    if (item.name.toUpperCase().includes(this.state.filter)) return true;\n    if (item.number.toString().includes(this.state.filter)) return true;\n    return false;\n  }\n\n  render() {\n    return (\n      <div>\n        <FormInput\n          type='text' \n          value={this.state.filter} \n          placeholder='find a contact'\n          onChange={(e)=>this.setState({filter:e.target.value.toUpperCase()})}\n        />\n        <div style={{display:'flex'}}>\n          <FormButton onClick={()=>this.props.setTemplateContacts()}>Set template contacts</FormButton>\n          <FormButton onClick={()=>this.props.removeAllContacts()}>Remove all contacts</FormButton>\n        </div>\n        <ContactList>\n          {this.props.contacts.filter(this.checkItem).map(({id,name,number})=>(\n            <ContactItem key={id}>\n              {name}:  {number}\n              <DeleteBtn onClick={()=>this.props.removeContact(id)}>Delete</DeleteBtn>\n            </ContactItem>\n          ))}\n        </ContactList>\n      </div>\n    )\n  }\n}\n\n","import Section from 'generalComponents/Section';\nimport React, { Component } from 'react'\nimport AddContactForm from './AddContactForm';\nimport DisplayContacts from './DisplayContacts';\n\nexport default class App extends Component {\n  state={\n    contacts:[],\n    filter:''\n  }\n\n  componentDidMount(){\n    let storedContacts = JSON.parse(localStorage.getItem('contactList'));\n    if (storedContacts) this.setState({contacts:storedContacts})\n  }\n\n  componentDidUpdate(){\n    localStorage.setItem('contactList',JSON.stringify(this.state.contacts));\n  }\n\n  //#region contacts state functions\n  checkContactExists=(newContact)=>{\n    for (let i=0;i<this.state.contacts.length;i++){\n      if (this.state.contacts[i].name.toLowerCase()===newContact.name.toLowerCase())  return true;\n      if (this.state.contacts[i].number===newContact.number) return true;\n    }\n    return false;\n  }\n\n  addContact=(name,number)=>{\n    if (this.checkContactExists({name,number})) alert('You already have this contact')\n    else this.setState({contacts:(\n      [...this.state.contacts, {\n        id:Date.now(),\n        name,\n        number\n      }])\n    })\n  }\n\n  removeContact=(contactID)=>{\n    this.setState({contacts:(\n        this.state.contacts.filter(item=>item.id!==contactID)\n      )});\n  }\n\n  removeAllContacts=()=>{this.setState({contacts:[]});}\n  setTemplateContacts=()=>{this.setState({contacts:templateContacts});}\n  //#endregion\n\n  render() {\n    return (\n      <Section type='task' title='Книга контактів'>\n        <Section label='Add contact'>\n          <AddContactForm submitFunction={this.addContact}/></Section>\n        <Section label='Contact list'>\n          <DisplayContacts contacts={this.state.contacts} removeContact={this.removeContact} removeAllContacts={this.removeAllContacts} setTemplateContacts={this.setTemplateContacts}/></Section>\n      </Section>\n    )\n  }\n\n  \n}\n\nconst templateContacts=[\n  {id: 'id-1', name: 'Rosie Simpson', number: '459-12-56'},\n  {id: 'id-2', name: 'Hermione Kline', number: '443-89-12'},\n  {id: 'id-3', name: 'Eden Clements', number: '645-17-79'},\n  {id: 'id-4', name: 'Annie Copeland', number: '227-91-26'}\n]\n"],"names":["FormLabel","styled","FormInput","FormButton","AddContactForm","state","name","number","submitHandler","e","preventDefault","target","elements","props","submitFunction","value","onSubmit","this","htmlFor","id","type","pattern","title","required","Component","ContactList","ContactItem","DeleteBtn","DisplayContacts","filter","checkItem","item","toUpperCase","includes","toString","placeholder","onChange","setState","style","display","onClick","setTemplateContacts","removeAllContacts","contacts","map","removeContact","App","checkContactExists","newContact","i","length","toLowerCase","addContact","alert","Date","now","contactID","templateContacts","storedContacts","JSON","parse","localStorage","getItem","setItem","stringify","Section","label"],"sourceRoot":""}